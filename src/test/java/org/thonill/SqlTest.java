/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.thonill;

import org.junit.jupiter.api.BeforeAll;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import org.thonill.sql.ConnectionInfo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.logging.Logger;

/**
 * SqlTest provides tests for database connectivity and operations.
 */

public class SqlTest {
   private static final Logger LOG = Logger.getLogger(SqlTest.class.getName());

    public static final String url = "jdbc:h2:./build/tmp/test/h2test";

    @BeforeAll
    public static void AppTestinit() {

        try {
            fillDb();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void AppTestinit1() {

        try {
            ConnectionInfo info = new ConnectionInfo("testDb", "sa", "", "src\\test\\resources");
            Connection conn = info.getConnection();
            fillDb(conn);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void fillDb() throws SQLException {

        // Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
        try (Connection conn = DriverManager.getConnection(url, "sa", "")) {

            fillDb(conn);

        }
        ;

    }

    private static void fillDb(Connection conn) throws SQLException {
        if (!conn.getMetaData().getTables(null, null, "KUNDEN", null).next()) {
            try (Statement stmt = conn.createStatement()) {
                createKundenTabelle(stmt);

            }

        } else {
            LOG.info("Table KUNDEN exists");
        }
        if (!conn.getMetaData().getTables(null, null, "RECHNUNG", null).next()) {
            try (Statement stmt = conn.createStatement()) {

                createRechnungTabelle(stmt);

            }

        } else {
            LOG.info("Table RECHNUNG exists");
        }
    }

    private static void createKundenTabelle(Statement stmt) throws SQLException {
        execute(stmt, "CREATE TABLE kunden (id INTEGER PRIMARY KEY, name VARCHAR(255), ort VARCHAR(255))");

        String[] names = { "thomas", "emil", "anna", "martha", "friedrich", "emil", "kurt", "tobias",
                "marhta",
                "anke" };

        for (int i = 0; i < 10; i++) {
            stmt.executeUpdate(
                    "INSERT INTO kunden (id, name, ort) VALUES (" + i + ", '" + names[i] + "', 'Ort "
                            + i + "')");
        }
    }

    private static void createRechnungTabelle(Statement stmt) throws SQLException {
        execute(stmt,
                "CREATE TABLE rechnung (id INTEGER PRIMARY KEY, kunde INTEGER, netto DECIMAL(10,2), mwst DECIMAL(10,2), skonto DECIMAL(10,2), rabatt DECIMAL(10,2))");

        Random random = new Random();
        for (int i = 1; i <= 100; i++) {
            int kunde = random.nextInt(10) + 1;
            BigDecimal netto = new BigDecimal(random.nextDouble() * 100).setScale(2, RoundingMode.HALF_UP).abs();
            BigDecimal mwst = netto.multiply(new BigDecimal("0.19")).setScale(2, RoundingMode.HALF_UP).abs();
            BigDecimal skonto = netto.multiply(new BigDecimal(random.nextDouble() * 0.1)).setScale(2,
                    RoundingMode.HALF_UP).abs();
            BigDecimal rabatt = netto.multiply(new BigDecimal(random.nextDouble() * 0.1)).setScale(2,
                    RoundingMode.HALF_UP).abs();

            String insertSql = "INSERT INTO rechnung (id, kunde, netto, mwst, skonto, rabatt) VALUES (" +
                    i + ", " + kunde + ", " + netto + ", " + mwst + ", " + skonto + ", " + rabatt + ")";
            stmt.executeUpdate(insertSql);
        }
    }

    @Test
    public void doSomething() {
        try {
            Connection conn = DriverManager.getConnection(url, "sa", "");

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM kunden");

            while (rs.next()) {
                LOG.info(rs.getInt("ID") + ": " + rs.getString("NAME"));
            }

            String searchName = "emil";
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM kunden WHERE name = ?");
            ps.setString(1, searchName);
            rs = ps.executeQuery();

            while (rs.next()) {
                LOG.info(rs.getInt("ID") + ": " + rs.getString("NAME") + " from " + rs.getString("ORT"));
            }

        } catch (Exception e) {
            fail();
        }
    }

    public static void execute(Statement sqlStatement, String query) throws SQLException {
        LOG.info(query);
        try {
            sqlStatement.execute(query);
        } catch (SQLException e) {
            LOG.info("Query failed");
            e.printStackTrace();
            throw e;
        }
    }
}